#!/usr/bin/env bash

# py-init-project <python-version> [virtualenv-name]
# $1 is the version of python
# $2 is the virtualenv name

if [ "$#" -lt 1 -o "$#" -gt 2 ]; then
    echo "USAGE: py-init-project <python-version> [virtualenv-name]"
fi

export PYTHON_CONFIGURE_OPTS="--enable-shared"
PYTHON_VERSION=$1

if [ "$#" -eq 2 ]; then
    DIRNAME=$2
else
    DIRNAME=${PWD##*/}
fi

set -euxo pipefail

pyenv install ${PYTHON_VERSION} --skip-existing
pyenv uninstall -f ${DIRNAME}
pyenv virtualenv ${PYTHON_VERSION} ${DIRNAME}
pyenv local ${DIRNAME}

# install these through pip so they are
# properly setup in pyenv's shims
pyenv exec pip install black pytest pdbpp poetry

# set the VIRTUAL_ENV variable.
# without it, pyenv-virtualenv and poetry
# don't play nice with each other:
# pyenv-virtualenv doesn't set it
# poetry expects it
export VIRTUAL_ENV=$(pyenv prefix)
echo "export VIRTUAL_ENV=\$(pyenv prefix)" >> .envrc
direnv allow

# setup poetry
rm -f pyproject.toml
pyenv exec python -m poetry init \
    --name ${DIRNAME} \
    --author dskard \
    --dev-dependency black \
    --dev-dependency pytest \
    --dev-dependency pdbpp \
    --license MIT \
    -n

pyenv exec python -m poetry install

# setup directory structure
mkdir -p src/${DIRNAME} tests/
touch src/${DIRNAME}/__init__.py
touch tests/__init__.py
touch tests/pytest.ini

# add a Makefile
cat << EOF > Makefile
PROJECT=${DIRNAME}
PYTESTOPTS?=
PYTHON_VERSION?=${PYTHON_VERSION}

.PHONY: pyenv
pyenv:
	pyenv install \${PYTHON_VERSION} --skip-existing
	pyenv uninstall \${PROJECT} || true
	pyenv virtualenv \${PYTHON_VERSION} \${PROJECT}
	pyenv local \${PROJECT}
	pip install black pytest pdbpp poetry
	sed -i '/export VIRTUAL_ENV=/d' .envrc || true
	echo "export VIRTUAL_ENV=\\\$\$\$\\(pyenv prefix)" >> .envrc
	direnv allow || true

.PHONY: all
all:
	poetry build

.PHONY: install
install:
	poetry install

.PHONY: run
run:
	poetry run ...

.PHONY: test
test:
	poetry run pytest \\
	    --verbose \\
	    --tb=short \\
	    \${PYTESTOPTS}

.PHONY: clean
clean:
	find . \\( -name '*.pyc' -or -name '*.pyo' \\) -print -delete
	find . -name '__pycache__' -print -delete
EOF

