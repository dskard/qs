#!/usr/bin/env bash

# py-init-project <python-version> [virtualenv-name]
# $1 is the version of python
# $2 is the virtualenv name

if [ "$#" -lt 1 -o "$#" -gt 2 ]; then
    echo "USAGE: py-init-project <python-version> [virtualenv-name]"
    exit
fi

export PYTHON_CONFIGURE_OPTS="--enable-shared"
PYTHON_VERSION=$1

if [ "$#" -eq 2 ]; then
    DIRNAME=$2
else
    DIRNAME=${PWD##*/}
fi

set -euxo pipefail

pyenv install ${PYTHON_VERSION} --skip-existing
pyenv virtualenv-delete ${DIRNAME} || true
pyenv virtualenv ${PYTHON_VERSION} ${DIRNAME}
pyenv local ${DIRNAME}

# install these through pip so they are
# properly setup in pyenv's shims
# may not need this anymore? since these packages are installed through poerty
# they seem to show up now in `pyenv which packagename`
#pyenv exec pip install black pytest pdbpp poetry python-semantic-release
# fix for poetry 1.7.0
# https://github.com/python-poetry/poetry/issues/8634
pyenv exec pip install poetry==1.6.1

# set the VIRTUAL_ENV variable.
# without it, pyenv-virtualenv and poetry
# don't play nice with each other:
# pyenv-virtualenv doesn't set it
# poetry expects it
export VIRTUAL_ENV=$(pyenv prefix)
echo "export VIRTUAL_ENV=\$(pyenv prefix)" >> .envrc
direnv allow

# setup poetry
rm -f pyproject.toml
pyenv exec python -m poetry init \
    --name ${DIRNAME} \
    --author dskard \
    --dev-dependency black \
    --dev-dependency pytest \
    --dev-dependency pdbpp \
    --dev-dependency python-semantic-release \
    --dev-dependency pre-commit \
    --license MIT \
    --no-interaction

# use the src dir setup
sed -i "s/packages = \[.*\]/packages = \[{include = \"${DIRNAME}\", from = \"src\"},\]/" pyproject.toml

# setup directory structure
mkdir -p src/${DIRNAME} tests/
touch src/${DIRNAME}/__init__.py
echo "__version__ = \"0.0.0\"" >> src/${DIRNAME}/__init__.py
touch tests/__init__.py
touch tests/pytest.ini
mkdir -p .github/workflows
touch README.md

# pin urllib3 to below 2.0
# https://github.com/python-poetry/poetry/issues/7936
# maybe this isnt needed anymore either?
# i think i was able to get around this by clearing poetry caches and doing an update
# poetry cache list
# poetry cache clear --all PyPI
# poetry cache clear --all pypi
# poetry update
# poetry install
#pyenv exec python -m poetry add --dev "urllib3<=2.0"

# install the project's dependencies
pyenv exec python -m poetry install

# add a Makefile
cat << EOF > Makefile
PROJECT=${DIRNAME}
PYTESTOPTS?=
PYTHON_VERSION?=${PYTHON_VERSION}

.PHONY: pyenv
pyenv:
	pyenv install \${PYTHON_VERSION} --skip-existing
	pyenv virtualenv-delete \${PROJECT} || true
	pyenv virtualenv \${PYTHON_VERSION} \${PROJECT}
	pyenv local \${PROJECT}
	pip install poetry
	sed -i '/export VIRTUAL_ENV=/d' .envrc || true
	echo "export VIRTUAL_ENV=\\\$\$\$\\(pyenv prefix)" >> .envrc
	direnv allow || true
	poetry install


.PHONY: all
all:
	poetry build

.PHONY: install
install:
	poetry install

.PHONY: run
run:
	poetry run ...

.PHONY: test
test:
	poetry run pytest \\
	    --verbose \\
	    --tb=short \\
	    \${PYTESTOPTS}

.PHONY: clean
clean:
	find . \\( -name '*.pyc' -or -name '*.pyo' \\) -print -delete
	find . -name '__pycache__' -print -delete
EOF

# add semantic release section to pyproject.toml
cat << EOF >> pyproject.toml

[tool.semantic_release]
version_variable = [
    "src/${DIRNAME}/__init__.py:__version__"
]
version_toml = [
    "pyproject.toml:tool.poetry.version"
]
major_on_zero = false
branch = "main"
upload_to_PyPI = true
upload_to_release = true
build_command = "pip install poetry && poetry build"
EOF

# add black configuration section to pyproject.toml
cat << EOF >> pyproject.toml

[tool.black]
line-length = 88
target-versions = ["py39"]
include = '\.pyi?$'
EOF

# add pre-commit configuration file
cat << EOF >> .pre-commit-config.yaml
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: check-yaml
      - id: end-of-file-fixer
      - id: trailing-whitespace
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3.9
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
EOF

cat << EOF >> .flake8
[flake8]
max-line-length = 88
extend-ignore = E203,E501
#per-file-ignores =
#    src/.../__init__.py:F401

# vim:filetype=dosini
EOF

# install pre-commit hooks
# maybe:
# pyenv exec python -m pre-commit install
pyenv exec pre-commit install

# add github workflow files

